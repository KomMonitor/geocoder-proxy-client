/*
 * KomMonitor Geocoder Proxy
 * KomMonitor Geocoder Proxy that defines a common query and response interface for arbitrary geocoding services like nominatim, photon (datasource is OSM)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: christian.danowski-buhren@hs-bochum.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.31
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from './ApiClient';
import {GeocodingFeatureType} from './model/GeocodingFeatureType';
import {GeocodingGeometryType} from './model/GeocodingGeometryType';
import {GeocodingOutputType} from './model/GeocodingOutputType';
import {GeocodingPropertiesType} from './model/GeocodingPropertiesType';
import {GeocodeApi} from './api/GeocodeApi';
import {ReverseGeocodeApi} from './api/ReverseGeocodeApi';

/**
* KomMonitor_Geocoder_Proxy_that_defines_a_common_query_and_response_interface_for_arbitrary_geocoding_services_like_nominatim_photon__datasource_is_OSM.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var KomMonitorGeocoderProxy = require('index'); // See note below*.
* var xxxSvc = new KomMonitorGeocoderProxy.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new KomMonitorGeocoderProxy.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new KomMonitorGeocoderProxy.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new KomMonitorGeocoderProxy.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 0.0.1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The GeocodingFeatureType model constructor.
     * @property {module:model/GeocodingFeatureType}
     */
    GeocodingFeatureType,

    /**
     * The GeocodingGeometryType model constructor.
     * @property {module:model/GeocodingGeometryType}
     */
    GeocodingGeometryType,

    /**
     * The GeocodingOutputType model constructor.
     * @property {module:model/GeocodingOutputType}
     */
    GeocodingOutputType,

    /**
     * The GeocodingPropertiesType model constructor.
     * @property {module:model/GeocodingPropertiesType}
     */
    GeocodingPropertiesType,

    /**
    * The GeocodeApi service constructor.
    * @property {module:api/GeocodeApi}
    */
    GeocodeApi,

    /**
    * The ReverseGeocodeApi service constructor.
    * @property {module:api/ReverseGeocodeApi}
    */
    ReverseGeocodeApi
};

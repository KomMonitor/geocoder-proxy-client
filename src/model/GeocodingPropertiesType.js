/*
 * KomMonitor Geocoder Proxy
 * KomMonitor Geocoder Proxy that defines a common query and response interface for arbitrary geocoding services like nominatim, photon (datasource is OSM)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: christian.danowski-buhren@hs-bochum.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.31
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The GeocodingPropertiesType model module.
 * @module model/GeocodingPropertiesType
 * @version 0.0.1
 */
export class GeocodingPropertiesType {
  /**
   * Constructs a new <code>GeocodingPropertiesType</code>.
   * @alias module:model/GeocodingPropertiesType
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>GeocodingPropertiesType</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/GeocodingPropertiesType} obj Optional instance to populate.
   * @return {module:model/GeocodingPropertiesType} The populated <code>GeocodingPropertiesType</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new GeocodingPropertiesType();
      if (data.hasOwnProperty('category'))
        obj.category = ApiClient.convertToType(data['category'], 'String');
      if (data.hasOwnProperty('type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
      if (data.hasOwnProperty('display_name'))
        obj.displayName = ApiClient.convertToType(data['display_name'], 'String');
      if (data.hasOwnProperty('country'))
        obj.country = ApiClient.convertToType(data['country'], 'String');
      if (data.hasOwnProperty('state'))
        obj.state = ApiClient.convertToType(data['state'], 'String');
      if (data.hasOwnProperty('postcode'))
        obj.postcode = ApiClient.convertToType(data['postcode'], 'String');
      if (data.hasOwnProperty('city'))
        obj.city = ApiClient.convertToType(data['city'], 'String');
      if (data.hasOwnProperty('district'))
        obj.district = ApiClient.convertToType(data['district'], 'String');
      if (data.hasOwnProperty('street'))
        obj.street = ApiClient.convertToType(data['street'], 'String');
      if (data.hasOwnProperty('housenumber'))
        obj.housenumber = ApiClient.convertToType(data['housenumber'], 'String');
    }
    return obj;
  }
}

/**
 * category of response (osm_key)
 * @member {String} category
 */
GeocodingPropertiesType.prototype.category = undefined;

/**
 * type within category (osm_value)
 * @member {String} type
 */
GeocodingPropertiesType.prototype.type = undefined;

/**
 * a descriptive string combining several address details within one string (i.e. for display popup purposes)
 * @member {String} displayName
 */
GeocodingPropertiesType.prototype.displayName = undefined;

/**
 * name of the country
 * @member {String} country
 */
GeocodingPropertiesType.prototype.country = undefined;

/**
 * name of the state
 * @member {String} state
 */
GeocodingPropertiesType.prototype.state = undefined;

/**
 * postal code
 * @member {String} postcode
 */
GeocodingPropertiesType.prototype.postcode = undefined;

/**
 * name of the city
 * @member {String} city
 */
GeocodingPropertiesType.prototype.city = undefined;

/**
 * name of the city district
 * @member {String} district
 */
GeocodingPropertiesType.prototype.district = undefined;

/**
 * name of the street
 * @member {String} street
 */
GeocodingPropertiesType.prototype.street = undefined;

/**
 * house number (including any suffix) if available
 * @member {String} housenumber
 */
GeocodingPropertiesType.prototype.housenumber = undefined;


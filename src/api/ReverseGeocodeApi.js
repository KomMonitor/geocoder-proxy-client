/*
 * KomMonitor Geocoder Proxy
 * KomMonitor Geocoder Proxy that defines a common query and response interface for arbitrary geocoding services like nominatim, photon (datasource is OSM)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: christian.danowski-buhren@hs-bochum.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.31
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {GeocodingOutputType} from '../model/GeocodingOutputType';

/**
* ReverseGeocode service.
* @module api/ReverseGeocodeApi
* @version 0.0.1
*/
export class ReverseGeocodeApi {

    /**
    * Constructs a new ReverseGeocodeApi. 
    * @alias module:api/ReverseGeocodeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the reverseGeocode operation.
     * @callback moduleapi/ReverseGeocodeApi~reverseGeocodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeocodingOutputType{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxies reverse-geocode request to underlying geocoding service in order to find address details for given longitude, latitude coordinates
     * proxies reverse-geocode request to underlying geocoding service in order to find address details for given longitude, latitude coordinates
     * @param {String} lon required longitude
     * @param {String} lat required latitude
     * @param {module:api/ReverseGeocodeApi~reverseGeocodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    reverseGeocode(lon, lat, callback) {
      
      let postBody = null;
      // verify the required parameter 'lon' is set
      if (lon === undefined || lon === null) {
        throw new Error("Missing the required parameter 'lon' when calling reverseGeocode");
      }
      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling reverseGeocode");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'lon': lon,'lat': lat
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GeocodingOutputType;

      return this.apiClient.callApi(
        '/geocoder/reverse', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
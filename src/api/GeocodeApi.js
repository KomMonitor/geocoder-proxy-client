/*
 * KomMonitor Geocoder Proxy
 * KomMonitor Geocoder Proxy that defines a common query and response interface for arbitrary geocoding services like nominatim, photon (datasource is OSM)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: christian.danowski-buhren@hs-bochum.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.31
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {GeocodingOutputType} from '../model/GeocodingOutputType';

/**
* Geocode service.
* @module api/GeocodeApi
* @version 0.0.1
*/
export class GeocodeApi {

    /**
    * Constructs a new GeocodeApi. 
    * @alias module:api/GeocodeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the geocodeByQueryString operation.
     * @callback moduleapi/GeocodeApi~geocodeByQueryStringCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeocodingOutputType{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxies search request to underlying geocoding service in order to find coordinates for entered location
     * proxies search request to underlying geocoding service in order to find coordinates for entered location
     * @param {String} q the query string (e.g. &#x27;Müllerstr. 3, Essen&#x27; or &#x27;3, Müllerstraße, 45147&#x27;)
     * @param {Object} opts Optional parameters
     * @param {String} opts.lon optional longitude to prioritize results
     * @param {String} opts.lat optional latitude to prioritize results
     * @param {module:api/GeocodeApi~geocodeByQueryStringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    geocodeByQueryString(q, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling geocodeByQueryString");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'q': q,'lon': opts['lon'],'lat': opts['lat']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GeocodingOutputType;

      return this.apiClient.callApi(
        '/geocoder/geocode/query-string', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the geocodeByStructuredQuery operation.
     * @callback moduleapi/GeocodeApi~geocodeByStructuredQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeocodingOutputType{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * proxies search request to underlying geocoding service in order to find coordinates for entered structured data. No parameter is required. Instead any combination of structrured query elements may respond with 0 ... n result records in the form of a GeoJSON FeatureCollection, where each feature has more or less details with regard to address details
     * proxies search request to underlying geocoding service in order to find coordinates for entered structured data. No parameter is required. Instead any combination of structrured query elements may respond with 0 ... n result records in the form of a GeoJSON FeatureCollection, where each feature has more or less details with regard to address details
     * @param {Object} opts Optional parameters
     * @param {String} opts.country optional country name
     * @param {String} opts.state optional state name
     * @param {String} opts.city optional city name
     * @param {String} opts.district optional district name
     * @param {String} opts.postcode optional postcode name
     * @param {String} opts.street required street name
     * @param {String} opts.housenumber optional housenumber name
     * @param {String} opts.lon optional longitude to prioritize results
     * @param {String} opts.lat optional latitude to prioritize results
     * @param {module:api/GeocodeApi~geocodeByStructuredQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    geocodeByStructuredQuery(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'country': opts['country'],'state': opts['state'],'city': opts['city'],'district': opts['district'],'postcode': opts['postcode'],'street': opts['street'],'housenumber': opts['housenumber'],'lon': opts['lon'],'lat': opts['lat']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GeocodingOutputType;

      return this.apiClient.callApi(
        '/geocoder/geocode/query-structured', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}